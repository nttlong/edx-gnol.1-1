# -*- coding:utf-8 -*-
from mako import runtime, filters, cache
UNDEFINED = runtime.UNDEFINED
STOP_RENDERING = runtime.STOP_RENDERING
__M_dict_builtin = dict
__M_locals_builtin = locals
_magic_number = 10
_modified_time = 1548073810.035227
_enable_loop = True
_template_filename = u'/home/nttlong/code/edx/apps/edx/edx-platform/xdj-gnol-lms-templates/instructor/instructor_dashboard_2/student_admin.html'
_template_uri = u'instructor/instructor_dashboard_2/student_admin.html'
_source_encoding = 'utf-8'
_exports = []


from django.utils.translation import ugettext as _ 

def render_body(context,section_data,**pageargs):
    __M_caller = context.caller_stack._push_frame()
    try:
        __M_locals = __M_dict_builtin(pageargs=pageargs,section_data=section_data)
        course = context.get('course', UNDEFINED)
        settings = context.get('settings', UNDEFINED)
        __M_writer = context.writer()
        __M_writer(u'\n')
        __M_writer(u'\n')
        if section_data['access']['staff'] or section_data['access']['instructor']:
            __M_writer(u'<div class="action-type-container">\n')
            if section_data['is_small_course']:
                __M_writer(u'        <br><br>\n        <h4 class="hd hd-4">')
                __M_writer(filters.html_escape(filters.decode.utf8(_("View gradebook for enrolled learners"))))
                __M_writer(u'</h4>\n        <br>\n        <label for="gradebook-link">')
                __M_writer(filters.html_escape(filters.decode.utf8(_("Note: This feature is available only to courses with a small number of enrolled learners."))))
                __M_writer(u'</label>\n        <br><br>\n        <span name="gradebook-link"><a href="')
                __M_writer(filters.html_escape(filters.decode.utf8( section_data['spoc_gradebook_url'] )))
                __M_writer(u'" class="gradebook-link"> ')
                __M_writer(filters.html_escape(filters.decode.utf8(_("View Gradebook"))))
                __M_writer(u' </a></span>\n        <br><br>\n        <hr>\n')
            __M_writer(u'</div>\n\n<div class="student-specific-container action-type-container">\n    <h4 class="hd hd-4">')
            __M_writer(filters.html_escape(filters.decode.utf8(_("View a specific learner's grades and progress"))))
            __M_writer(u'</h4>\n    <div class="request-response-error"></div>\n    <label for="student-select-progress">\n        ')
            __M_writer(filters.html_escape(filters.decode.utf8(_("Learner's {platform_name} email address or username").format(platform_name=settings.PLATFORM_NAME))))
            __M_writer(u'\n    </label>\n    <br>\n    <input type="text" name="student-select-progress" placeholder="')
            __M_writer(filters.html_escape(filters.decode.utf8(_('Learner email address or username'))))
            __M_writer(u'" >\n    <br><br>\n    <div class="progress-link-wrapper">\n        <span name="progress-link">\n            <a href="" class="progress-link" data-endpoint="')
            __M_writer(filters.html_escape(filters.decode.utf8( section_data['get_student_progress_url_url'] )))
            __M_writer(u'">\n                ')
            __M_writer(filters.html_escape(filters.decode.utf8(_("View Progress Page"))))
            __M_writer(u'\n            </a>\n        </span>\n    </div>\n  <hr>\n</div>\n\n<div class="student-grade-container action-type-container">\n    <h4 class="hd hd-4">')
            __M_writer(filters.html_escape(filters.decode.utf8(_("Adjust a learner's grade for a specific problem"))))
            __M_writer(u'</h4>\n    <div class="request-response-error"></div>\n    <label for="student-select-grade">\n        ')
            __M_writer(filters.html_escape(filters.decode.utf8(_("Learner's {platform_name} email address or username").format(platform_name=settings.PLATFORM_NAME))))
            __M_writer(u'\n    </label>\n    <br>\n    <input type="text" name="student-select-grade" placeholder="')
            __M_writer(filters.html_escape(filters.decode.utf8(_('Learner email address or username'))))
            __M_writer(u'">\n    </label>\n    <br><br>\n\n    <label for="problem-select-single">\n        ')
            __M_writer(filters.html_escape(filters.decode.utf8(_("Location of problem in course"))))
            __M_writer(u'<br>\n        <span class="location-example">')
            __M_writer(filters.html_escape(filters.decode.utf8(_("Example"))))
            __M_writer(u': block-v1:edX+DemoX+2015+type@problem+block@618c5933b8b544e4a4cc103d3e508378</span>\n    </label>\n    <br>\n    <input type="text" name="problem-select-single" placeholder="')
            __M_writer(filters.html_escape(filters.decode.utf8(_('Problem location'))))
            __M_writer(u'">\n    <br><br><br>\n\n    <h5 class="hd hd-5">')
            __M_writer(filters.html_escape(filters.decode.utf8(_("Attempts"))))
            __M_writer(u'</h5>\n    <label for="reset-attempts-single">')
            __M_writer(filters.html_escape(filters.decode.utf8(_("Allow a learner who has used up all attempts to work on the problem again."))))
            __M_writer(u'</label>\n    <br>\n    <input type="button" name="reset-attempts-single" value="')
            __M_writer(filters.html_escape(filters.decode.utf8(_('Reset Attempts to Zero'))))
            __M_writer(u'" data-endpoint="')
            __M_writer(filters.html_escape(filters.decode.utf8( section_data['reset_student_attempts_url'] )))
            __M_writer(u'">\n\n    <br><br>\n\n')
            if settings.FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'):
                __M_writer(u'        <h5 class="hd hd-5">')
                __M_writer(filters.html_escape(filters.decode.utf8(_("Rescore"))))
                __M_writer(u'</h5>\n        <label for="rescore-actions-single">')
                __M_writer(filters.html_escape(filters.decode.utf8(_("For the specified problem, rescore the learner's responses. The 'Rescore Only If Score Improves' option updates the learner's score only if it improves in the learner's favor."))))
                __M_writer(u'</label>\n        <br>\n        <span name="rescore-actions-single">\n            <input type="button" name="rescore-problem-single" value="')
                __M_writer(filters.html_escape(filters.decode.utf8(_('Rescore Learner\'s Submission'))))
                __M_writer(u'" data-endpoint="')
                __M_writer(filters.html_escape(filters.decode.utf8( section_data['rescore_problem_url'] )))
                __M_writer(u'">\n            <input type="button" name="rescore-problem-if-higher-single" value="')
                __M_writer(filters.html_escape(filters.decode.utf8(_('Rescore Only If Score Improves'))))
                __M_writer(u'" data-endpoint="')
                __M_writer(filters.html_escape(filters.decode.utf8( section_data['rescore_problem_url'] )))
                __M_writer(u'">\n        </span>\n')
            __M_writer(u'\n    <br><br>\n\n')
            if settings.FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'):
                __M_writer(u'        <h5 class="hd hd-5">')
                __M_writer(filters.html_escape(filters.decode.utf8(_("Score Override"))))
                __M_writer(u'</h5>\n        <label for="override-problem-score-single">')
                __M_writer(filters.html_escape(filters.decode.utf8(_("For the specified problem, override the learner's score."))))
                __M_writer(u'</label>\n        <br><br>\n        <label for="score-select-single">\n            ')
                __M_writer(filters.html_escape(filters.decode.utf8(_("New score for problem, out of the total points available for the problem"))))
                __M_writer(u'<br>\n        </label>\n        <br>\n        <input type="text" name="score-select-single" placeholder="')
                __M_writer(filters.html_escape(filters.decode.utf8(_('Score'))))
                __M_writer(u'">\n        <br><br>\n        <span name="override-actions-single">\n            <input type="button" name="override-problem-score-single" value="')
                __M_writer(filters.html_escape(filters.decode.utf8(_('Override Learner\'s Score'))))
                __M_writer(u'" data-endpoint="')
                __M_writer(filters.html_escape(filters.decode.utf8( section_data['override_problem_score_url'] )))
                __M_writer(u'">\n        </span>\n')
            __M_writer(u'\n    <br><br>\n\n    <h5 class="hd hd-5">')
            __M_writer(filters.html_escape(filters.decode.utf8(_("Problem History"))))
            __M_writer(u'</h5>\n    <label for="delete-state-single">')
            __M_writer(filters.html_escape(filters.decode.utf8(_("For the specified problem, permanently and completely delete the learner's answers and scores from the database."))))
            __M_writer(u'</label>\n    <br>\n    <input type="button" class="molly-guard" name="delete-state-single" value="')
            __M_writer(filters.html_escape(filters.decode.utf8(_('Delete Learner\'s State'))))
            __M_writer(u'" data-endpoint="')
            __M_writer(filters.html_escape(filters.decode.utf8( section_data['reset_student_attempts_url'] )))
            __M_writer(u'">\n\n    <br><br>\n\n')
            if settings.FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'):
                __M_writer(u'        <h5 class="hd hd-5">')
                __M_writer(filters.html_escape(filters.decode.utf8(_("Task Status"))))
                __M_writer(u'</h5>\n        <label for="task-history-single">')
                __M_writer(filters.html_escape(filters.decode.utf8(_("Show the status for the rescoring tasks that you submitted for this learner and problem."))))
                __M_writer(u'</label>\n        <br>\n        <input type="button" name="task-history-single" value="')
                __M_writer(filters.html_escape(filters.decode.utf8(_('Show Task Status'))))
                __M_writer(u'" data-endpoint="')
                __M_writer(filters.html_escape(filters.decode.utf8( section_data['list_instructor_tasks_url'] )))
                __M_writer(u'" aria-describedby="task-history-single-help">\n        <div class="task-history-single-table"></div>\n')
            __M_writer(u'  <hr>\n</div>\n\n')
            if course.entrance_exam_enabled:
                __M_writer(u'<div class="entrance-exam-grade-container action-type-container">\n    <h4 class="hd hd-4">')
                __M_writer(filters.html_escape(filters.decode.utf8(_("Adjust a learner's entrance exam results"))))
                __M_writer(u'</h4>\n    <div class="request-response-error"></div>\n\n    <label for="entrance-exam-student-select-grade">\n        ')
                __M_writer(filters.html_escape(filters.decode.utf8(_("Learner's {platform_name} email address or username").format(platform_name=settings.PLATFORM_NAME))))
                __M_writer(u'\n    </label>\n    <br>\n    <input type="text" name="entrance-exam-student-select-grade" placeholder="')
                __M_writer(filters.html_escape(filters.decode.utf8(_('Learner email address or username'))))
                __M_writer(u'">\n    <br><br><br>\n\n    <h5 class="hd hd-5">')
                __M_writer(filters.html_escape(filters.decode.utf8(_("Attempts"))))
                __M_writer(u'</h5>\n    <label for="reset-entrance-exam-attempts">')
                __M_writer(filters.html_escape(filters.decode.utf8(_("Allow the learner to take the exam again."))))
                __M_writer(u'</label>\n    <br>\n    <input type="button" name="reset-entrance-exam-attempts" value="')
                __M_writer(filters.html_escape(filters.decode.utf8(_('Reset Attempts to Zero'))))
                __M_writer(u'" data-endpoint="')
                __M_writer(filters.html_escape(filters.decode.utf8( section_data['reset_student_attempts_for_entrance_exam_url'] )))
                __M_writer(u'">\n    <br><br>\n\n    <h5 class="hd hd-5">')
                __M_writer(filters.html_escape(filters.decode.utf8(_("Allow Skip"))))
                __M_writer(u'</h5>\n    <label for="skip-entrance-exam">')
                __M_writer(filters.html_escape(filters.decode.utf8(_("Waive the requirement for the learner to take the exam."))))
                __M_writer(u'</label>\n    <br>\n    <input type="button" name="skip-entrance-exam" value="')
                __M_writer(filters.html_escape(filters.decode.utf8(_('Let Learner Skip Entrance Exam'))))
                __M_writer(u'" data-endpoint="')
                __M_writer(filters.html_escape(filters.decode.utf8( section_data['student_can_skip_entrance_exam_url'] )))
                __M_writer(u'">\n    <br><br>\n\n')
                if settings.FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS') and section_data['access']['instructor']:
                    __M_writer(u'        <h5 class="hd hd-5">')
                    __M_writer(filters.html_escape(filters.decode.utf8(_("Rescore"))))
                    __M_writer(u'</h5>\n        <label for="rescore-actions-entrance-exam">\n            ')
                    __M_writer(filters.html_escape(filters.decode.utf8(_("Rescore any responses that have been submitted. The 'Rescore All Problems Only If Score Improves' option updates the learner's scores only if it improves in the learner's favor."))))
                    __M_writer(u'\n        </label>\n        <br>\n        <span name="rescore-actions-entrance-exam">\n            <input type="button" name="rescore-entrance-exam" value="')
                    __M_writer(filters.html_escape(filters.decode.utf8(_('Rescore All Problems'))))
                    __M_writer(u'" data-endpoint="')
                    __M_writer(filters.html_escape(filters.decode.utf8( section_data['rescore_entrance_exam_url'] )))
                    __M_writer(u'">\n            <input type="button" name="rescore-entrance-exam-if-higher" value="')
                    __M_writer(filters.html_escape(filters.decode.utf8(_('Rescore All Problems Only If Score Improves'))))
                    __M_writer(u'" data-endpoint="')
                    __M_writer(filters.html_escape(filters.decode.utf8( section_data['rescore_entrance_exam_url'] )))
                    __M_writer(u'">\n        </span>\n        <br><br>\n')
                __M_writer(u'\n    <h5 class="hd hd-5">')
                __M_writer(filters.html_escape(filters.decode.utf8(_("Entrance Exam History"))))
                __M_writer(u'</h5>\n    <label for="delete-entrance-exam-state">\n        ')
                __M_writer(filters.html_escape(filters.decode.utf8(_("For the entire entrance exam, permanently and completely delete the learner's answers and scores from the database."))))
                __M_writer(u'\n    </label>\n    <br>\n    <input type="button" class="molly-guard" name="delete-entrance-exam-state" value="')
                __M_writer(filters.html_escape(filters.decode.utf8(_('Delete Learner\'s State'))))
                __M_writer(u'" data-endpoint="')
                __M_writer(filters.html_escape(filters.decode.utf8( section_data['reset_student_attempts_for_entrance_exam_url'] )))
                __M_writer(u'"></label>\n    <br><br>\n\n\n')
                if settings.FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'):
                    __M_writer(u'        <h5 class="hd hd-5">')
                    __M_writer(filters.html_escape(filters.decode.utf8(_("Task Status"))))
                    __M_writer(u'</h5>\n        <label for="entrance-exam-task-history">\n            ')
                    __M_writer(filters.html_escape(filters.decode.utf8(_("Show the status for the rescoring tasks that you submitted for this learner and entrance exam."))))
                    __M_writer(u'\n        </label>\n        <br>\n        <p><input type="button" name="entrance-exam-task-history" value="')
                    __M_writer(filters.html_escape(filters.decode.utf8(_('Show Task Status'))))
                    __M_writer(u'" data-endpoint="')
                    __M_writer(filters.html_escape(filters.decode.utf8( section_data['list_entrace_exam_instructor_tasks_url'] )))
                    __M_writer(u'" aria-describedby="entrance-exam-task-history-help"></p>\n        <div class="entrance-exam-task-history-table"></div>\n')
                __M_writer(u'    <hr>\n</div>\n')
            __M_writer(u'\n')
        __M_writer(u'\n')
        if section_data['access']['instructor']:
            if settings.FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'):
                __M_writer(u'<div class="course-specific-container action-type-container">\n    <h4 class="hd hd-4">')
                __M_writer(filters.html_escape(filters.decode.utf8(_("Adjust all enrolled learners' grades for a specific problem"))))
                __M_writer(u'</h4>\n    <div class="request-response-error"></div>\n\n    <label for="problem-select-all">\n        ')
                __M_writer(filters.html_escape(filters.decode.utf8(_("Location of problem in course"))))
                __M_writer(u'<br>\n        <span class="location-example">')
                __M_writer(filters.html_escape(filters.decode.utf8(_("Example"))))
                __M_writer(u': block-v1:edX+DemoX+2015+type@problem+block@618c5933b8b544e4a4cc103d3e508378</span>\n    </label>\n    <br>\n    <input type="text" name="problem-select-all" placeholder="')
                __M_writer(filters.html_escape(filters.decode.utf8(_('Problem location'))))
                __M_writer(u'">\n    <br><br><br>\n\n    <h5 class="hd hd-5">')
                __M_writer(filters.html_escape(filters.decode.utf8(_("Attempts"))))
                __M_writer(u'</h5>\n    <label for="reset-attempts-all">')
                __M_writer(filters.html_escape(filters.decode.utf8(_("Allows all learners to work on the problem again."))))
                __M_writer(u'</label>\n    <br>\n    <input type="button" class="molly-guard" name="reset-attempts-all" value="')
                __M_writer(filters.html_escape(filters.decode.utf8(_('Reset Attempts to Zero'))))
                __M_writer(u'" data-endpoint="')
                __M_writer(filters.html_escape(filters.decode.utf8( section_data['reset_student_attempts_url'] )))
                __M_writer(u'">\n    <br><br>\n\n    <h5 class="hd hd-5">')
                __M_writer(filters.html_escape(filters.decode.utf8(_("Rescore"))))
                __M_writer(u'</h5>\n    <label for="rescore-actions-all">')
                __M_writer(filters.html_escape(filters.decode.utf8(_("Rescore submitted responses. The 'Rescore Only If Scores Improve' option updates a learner's score only if it improves in the learner's favor."))))
                __M_writer(u'</label>\n    <br>\n    <span name="rescore-actions-all">\n        <input type="button" class="molly-guard" name="rescore-problem-all" value="')
                __M_writer(filters.html_escape(filters.decode.utf8(_('Rescore All Learners\' Submissions'))))
                __M_writer(u'" data-endpoint="')
                __M_writer(filters.html_escape(filters.decode.utf8( section_data['rescore_problem_url'] )))
                __M_writer(u'">\n        <input type="button" class="molly-guard" name="rescore-problem-all-if-higher" value="')
                __M_writer(filters.html_escape(filters.decode.utf8(_('Rescore Only If Scores Improve'))))
                __M_writer(u'" data-endpoint="')
                __M_writer(filters.html_escape(filters.decode.utf8( section_data['rescore_problem_url'] )))
                __M_writer(u'">\n    </span>\n    <br><br>\n\n    <h5 class="hd hd-5">')
                __M_writer(filters.html_escape(filters.decode.utf8(_("Task Status"))))
                __M_writer(u'</h5>\n    <label for="task-history-all">')
                __M_writer(filters.html_escape(filters.decode.utf8(_("Show the status for the tasks that you submitted for this problem."))))
                __M_writer(u'</label>\n    <br>\n    <input type="button" name="task-history-all" value="')
                __M_writer(filters.html_escape(filters.decode.utf8(_('Show Task Status'))))
                __M_writer(u'" data-endpoint="')
                __M_writer(filters.html_escape(filters.decode.utf8( section_data['list_instructor_tasks_url'] )))
                __M_writer(u'" aria-describedby="task-history-all-help">\n    <div class="task-history-all-table"></div>\n    <hr>\n</div>\n')
        __M_writer(u'\n')
        if settings.FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'):
            __M_writer(u'<div class="running-tasks-container action-type-container">\n    <h4 class="hd hd-4">')
            __M_writer(filters.html_escape(filters.decode.utf8(_("Pending Tasks"))))
            __M_writer(u'</h4>\n    <div class="running-tasks-section">\n        <label>')
            __M_writer(filters.html_escape(filters.decode.utf8(_("The status for any active tasks appears in a table below."))))
            __M_writer(u'</label>\n        <br>\n        <div class="running-tasks-table" data-endpoint="')
            __M_writer(filters.html_escape(filters.decode.utf8( section_data['list_instructor_tasks_url'] )))
            __M_writer(u'"></div>\n    </div>\n    <div class="no-pending-tasks-message"></div>\n</div>\n')
        return ''
    finally:
        context.caller_stack._pop_frame()


"""
__M_BEGIN_METADATA
{"source_encoding": "utf-8", "line_map": {"16": 2, "18": 1, "25": 1, "26": 2, "27": 3, "28": 4, "29": 5, "30": 6, "31": 7, "32": 7, "33": 9, "34": 9, "35": 11, "36": 11, "37": 11, "38": 11, "39": 15, "40": 18, "41": 18, "42": 21, "43": 21, "44": 24, "45": 24, "46": 28, "47": 28, "48": 29, "49": 29, "50": 37, "51": 37, "52": 40, "53": 40, "54": 43, "55": 43, "56": 48, "57": 48, "58": 49, "59": 49, "60": 52, "61": 52, "62": 55, "63": 55, "64": 56, "65": 56, "66": 58, "67": 58, "68": 58, "69": 58, "70": 62, "71": 63, "72": 63, "73": 63, "74": 64, "75": 64, "76": 67, "77": 67, "78": 67, "79": 67, "80": 68, "81": 68, "82": 68, "83": 68, "84": 71, "85": 74, "86": 75, "87": 75, "88": 75, "89": 76, "90": 76, "91": 79, "92": 79, "93": 82, "94": 82, "95": 85, "96": 85, "97": 85, "98": 85, "99": 88, "100": 91, "101": 91, "102": 92, "103": 92, "104": 94, "105": 94, "106": 94, "107": 94, "108": 98, "109": 99, "110": 99, "111": 99, "112": 100, "113": 100, "114": 102, "115": 102, "116": 102, "117": 102, "118": 105, "119": 108, "120": 109, "121": 110, "122": 110, "123": 114, "124": 114, "125": 117, "126": 117, "127": 120, "128": 120, "129": 121, "130": 121, "131": 123, "132": 123, "133": 123, "134": 123, "135": 126, "136": 126, "137": 127, "138": 127, "139": 129, "140": 129, "141": 129, "142": 129, "143": 132, "144": 133, "145": 133, "146": 133, "147": 135, "148": 135, "149": 139, "150": 139, "151": 139, "152": 139, "153": 140, "154": 140, "155": 140, "156": 140, "157": 144, "158": 145, "159": 145, "160": 147, "161": 147, "162": 150, "163": 150, "164": 150, "165": 150, "166": 154, "167": 155, "168": 155, "169": 155, "170": 157, "171": 157, "172": 160, "173": 160, "174": 160, "175": 160, "176": 163, "177": 166, "178": 168, "179": 169, "180": 170, "181": 171, "182": 172, "183": 172, "184": 176, "185": 176, "186": 177, "187": 177, "188": 180, "189": 180, "190": 183, "191": 183, "192": 184, "193": 184, "194": 186, "195": 186, "196": 186, "197": 186, "198": 189, "199": 189, "200": 190, "201": 190, "202": 193, "203": 193, "204": 193, "205": 193, "206": 194, "207": 194, "208": 194, "209": 194, "210": 198, "211": 198, "212": 199, "213": 199, "214": 201, "215": 201, "216": 201, "217": 201, "218": 207, "219": 208, "220": 209, "221": 210, "222": 210, "223": 212, "224": 212, "225": 214, "226": 214, "232": 226}, "uri": "instructor/instructor_dashboard_2/student_admin.html", "filename": "/home/nttlong/code/edx/apps/edx/edx-platform/xdj-gnol-lms-templates/instructor/instructor_dashboard_2/student_admin.html"}
__M_END_METADATA
"""
